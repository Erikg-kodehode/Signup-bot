# Stage 1: Build
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /source

# Copy the .csproj files for the projects
COPY MorningSignInBot.csproj .
COPY ConsoleHost/ConsoleHost.csproj ./ConsoleHost/

# Restore dependencies for the projects
RUN dotnet restore "ConsoleHost/ConsoleHost.csproj"

# Copy all other source code from the current project directory
COPY . .

# Publish the application
# WORKDIR is already /source (which is the project root in this context)
RUN dotnet publish "ConsoleHost/ConsoleHost.csproj" -c Release -o /app/publish --no-restore

# Stage 2: Runtime
FROM mcr.microsoft.com/dotnet/aspnet:8.0
WORKDIR /app

# Install common debugging tools & ca-certificates
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    procps iproute2 curl nano ca-certificates && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Create non-root user and group
RUN addgroup --system --gid 1000 appgroup && \
    adduser --system --disabled-password --gecos "" --home "/app" --ingroup appgroup --shell "/bin/bash" --uid 1000 appuser

# Create directories for data and logs
RUN mkdir -p /app/data /app/Logs && \
    chown -R appuser:appgroup /app && \
    chmod -R 755 /app && \
    chmod -R 777 /app/data /app/Logs

# Copy published application from build stage
COPY --from=build /app/publish .

# Set timezone
ENV TZ=Europe/Oslo

# Healthcheck to verify bot is running
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

# Define volumes for persistent data
VOLUME ["/app/data", "/app/Logs"]

# Switch to non-root user
USER appuser

# Application entry point
ENTRYPOINT ["dotnet", "ConsoleHost.dll"]
